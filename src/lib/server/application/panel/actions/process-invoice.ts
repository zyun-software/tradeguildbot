import { DependencyInjection } from '../..';
import { ApiAction, getDefaultApiActionResult, type ApiActionExecuteType } from '../../api';

export class ProcessInvoiceAction extends ApiAction<
	{
		guild_id: number;
		id: number;
		action: 'pay' | 'no_pay' | 'cancel';
	},
	string
> {
	public async execute(): Promise<ApiActionExecuteType<string>> {
		const result = getDefaultApiActionResult<string>('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –¥–ª—è —Ä–∞–≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É');

		const guildMemberRepository = DependencyInjection.GuildMemberRepository;

		const guildMember = await guildMemberRepository.getByUserIdAndGuildId(
			this._user.id,
			this._data.guild_id
		);

		const invoiceRepository = DependencyInjection.InvoiceRepository;
		const invoice = await invoiceRepository.findById(this._data.id);

		const notFound = '–†–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';

		if (!invoice) {
			result.error = notFound;
			return result;
		}

		const accountPayer = await invoice.getPayerAccount();
		const guildMemberPayer = await accountPayer.getGuildMember();

		const accountSeller = await invoice.getSellerAccount();
		const guildMemberSeller = await accountSeller.getGuildMember();

		if (![guildMemberSeller.id, guildMemberPayer.id].includes(guildMember.id)) {
			result.error = notFound;
			return result;
		}

		const guildRepository = DependencyInjection.GuildMemberRepository;
		const guild = await guildRepository.getById(this._data.guild_id);

		const telegram = DependencyInjection.RequestRepository.telegram;

		if (this._data.action === 'cancel') {
			if (guildMemberSeller.id !== guildMember.id || invoice.paid) {
				result.error = '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ–π —Ä–∞—Ö—É–Ω–æ–∫';
				return result;
			}

			await invoiceRepository.delete(invoice);

			await telegram('sendMessage', {
				chat_id: guildMemberPayer.user_id,
				text:
					'üóë –í–∏—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n\n' +
					`üèõÔ∏è –ì—ñ–ª—å–¥—ñ—è: *${guild.name}*\n` +
					`üé´ –ö–æ–¥: *${invoice.id}*\n` +
					`üõí –ü—Ä–æ–¥–∞–≤–µ—Ü—å: \`${guildMemberSeller.name}\``
			});

			result.success = true;
			result.response = '‚úÖ –†–∞—Ö—É–Ω–æ–∫ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ';

			return result;
		}

		if (this._data.action === 'no_pay') {
			if (guildMemberPayer.id !== guildMember.id || invoice.paid) {
				result.error = '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ —É —Å–ø–ª–∞—Ç—ñ —Ü—å–æ–≥–æ —Ä–∞—Ö—É–Ω–æ–∫—É';
				return result;
			}

			await invoiceRepository.delete(invoice);

			await telegram('sendMessage', {
				chat_id: guildMemberSeller.user_id,
				text:
					'üö´ –£ —Å–ø–ª–∞—Ç—ñ —Ä–∞—Ö—É–Ω–∫—É –±—É–ª–æ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ\n\n' +
					`üèõÔ∏è –ì—ñ–ª—å–¥—ñ—è: *${guild.name}*\n` +
					`üé´ –ö–æ–¥: *${invoice.id}*\n` +
					`üõçÔ∏è –ü–ª–∞—Ç–Ω–∏–∫: \`${guildMemberPayer.name}\``
			});

			result.success = true;
			result.response = '‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º–æ–≤–∏–ª–∏ —É —Å–ø–ª–∞—Ç—ñ —Ü—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É';

			return result;
		}

		if (this._data.action === 'pay') {
			if (guildMemberPayer.id !== guildMember.id || invoice.paid) {
				result.error = '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ —Ü–µ–π —Ä–∞—Ö—É–Ω–æ–∫';
				return result;
			}

			const moneyService = DependencyInjection.MoneyService;
			const transaction = await moneyService.transaction(
				accountPayer.currency_id,
				this._data.guild_id,
				guildMemberPayer.name,
				guildMemberSeller.name,
				invoice.amount,
				`–û–ø–ª–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É #${invoice.id}`
			);

			if (!transaction.success) {
				result.error = transaction.message;
				return result;
			}

			await invoice.setPaid(true);

			result.success = true;
			result.response = '‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–ø–ª–∞—Ç–∏–ª–∏ —Ü–µ–π —Ä–∞—Ö—É–Ω–æ–∫';

			return result;
		}

		return result;
	}
}
