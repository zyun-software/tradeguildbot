import {
	AccountEntity,
	CurrencyEntity,
	GuildMemberEntity,
	GuildRepository,
	InvoiceEntity,
	InvoiceRepository,
	type AccountRepository,
	type CurrencyRepository,
	type GuildMemberRepository,
	type RequestRepository
} from '../models';

export type MoneyType = {
	guild_member: GuildMemberEntity;
	account: AccountEntity;
	currency: CurrencyEntity;
};

export class MoneyService {
	public constructor(
		private _accountRepository: AccountRepository,
		private _currencyRepository: CurrencyRepository,
		private _guildMemberRepository: GuildMemberRepository,
		private _requestRepository: RequestRepository,
		private _guildRepository: GuildRepository,
		private _invoiceRepository: InvoiceRepository
	) {}

	public async getByNameAndCurrencyIdAndGuildId(
		name: string,
		currency_id: number,
		guild_id: number
	): Promise<{
		guild_member: GuildMemberEntity;
		currency: CurrencyEntity;
		account: AccountEntity;
	}> {
		const guild_member = await this._guildMemberRepository.findByNameAndGuildId(name, guild_id);
		if (!guild_member) {
			throw new Error('–í–ª–∞—Å–Ω–∏–∫ —Ü—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ —è–≤–ª—è—î—Ç—å—Å—è —É—á–∞—Å–Ω–∏–∫–æ–º –≥—ñ–ª—å–¥—ñ—ó');
		}

		if (!guild_member.approved) {
			throw new Error('–ì—ñ–ª—å–¥–º–∞–π—Å—Ç–µ—Ä –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø —Ü—å–æ–≥–æ –≥—ñ–ª—å–¥–º–∞–π—Å—Ç—Ä–∞');
		}

		const currency = await this._currencyRepository.findById(currency_id);
		if (!currency || currency.guild_id !== guild_id) {
			throw new Error('–í–∞–ª—é—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
		}

		let account = await this._accountRepository.findByGuildMemberIdAndCurrencyId(
			guild_member.id,
			currency.id
		);

		if (!account) {
			const entity = new AccountEntity({
				model: {
					id: -1,
					guild_member_id: guild_member.id,
					currency_id: currency.id,
					balance: 0,
					reserve: 0,
					money_request: false,
					money_request_type: 'introduction',
					money_request_amount: 0
				},
				repository: this._accountRepository
			});

			account = await this._accountRepository.save(entity);
		}

		return { account, guild_member, currency };
	}

	public async transaction(
		currency_id: number,
		guild_id: number,
		sender: string,
		receiver: string,
		amount: number,
		comment: string
	): Promise<{
		success: boolean;
		message: string;
	}> {
		const result = {
			success: false,
			message: ''
		};

		if (amount < 1) {
			result.message = '–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è';
			return result;
		}

		let me: MoneyType;

		try {
			me = await this.getByNameAndCurrencyIdAndGuildId(sender, currency_id, guild_id);
		} catch (error: any) {
			result.message = error.message;
			return result;
		}

		if (amount > me.account.balance) {
			result.message = '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É';
			return result;
		}

		let to: MoneyType;

		try {
			to = await this.getByNameAndCurrencyIdAndGuildId(receiver, currency_id, guild_id);
		} catch (error: any) {
			result.message = error.message;
			return result;
		}

		comment = comment.replace(/\s+/g, ' ').trim();
		comment = comment.length ? `\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comment}` : '';
		const maxLength = 200;
		comment = comment.length > maxLength ? comment.substring(0, maxLength) : comment;

		await me.account.removeFromBalance(amount);

		const toBalance =
			me.guild_member.id === to.guild_member.id ? to.account.balance : to.account.balance + amount;
		await to.account.setBalance(toBalance);

		const guild = await this._guildRepository.getById(guild_id);

		await this._requestRepository.telegram('sendMessage', {
			chat_id: me.guild_member.user_id,
			text:
				'üí∏ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n\n' +
				`üèõÔ∏è –ì—ñ–ª—å–¥—ñ—è: ${guild.name}\n` +
				`üè∑Ô∏è –û—Ç—Ä–∏–º—É–≤–∞—á: ${to.guild_member.name}\n` +
				`üí∞ –°—É–º–∞: ${amount} ${me.currency.code}` +
				comment +
				`\n\n#–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–ø–µ—Ä–µ–∫–∞–∑ #${to.guild_member.name}`,
			parse_mode: undefined
		});

		await this._requestRepository.telegram('sendMessage', {
			chat_id: to.guild_member.user_id,
			text:
				'ü§ë –û—Ç—Ä–∏–º–∞–Ω–æ –ø–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤\n\n' +
				`üèõÔ∏è –ì—ñ–ª—å–¥—ñ—è: ${guild.name}\n` +
				`üè∑Ô∏è –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${me.guild_member.name}\n` +
				`üí∞ –°—É–º–∞: ${amount} ${me.currency.code}` +
				comment +
				`\n\n#–æ—Ç—Ä–∏–º–∞–Ω–æ–ø–µ—Ä–µ–∫–∞–∑ #${me.guild_member.name}`,
			parse_mode: undefined
		});

		result.success = true;
		result.message = '–ü–µ—Ä–µ–∫–∞–∑ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ';

		return result;
	}

	public async createInvoice(
		guild_id: number,
		currency_id: number,
		seller: string,
		payer: string,
		amount: number,
		purpose: string
	): Promise<{
		success: boolean;
		message: string;
		id?: number;
	}> {
		const result: { success: boolean; message: string; id?: number } = {
			success: false,
			message: '',
			id: undefined
		};

		if (amount < 1) {
			result.message = '–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è';
			return result;
		}

		let moneySeller: MoneyType;
		try {
			moneySeller = await this.getByNameAndCurrencyIdAndGuildId(seller, currency_id, guild_id);
		} catch (error: any) {
			result.message = error.message;
			return result;
		}

		let moneyPayer: MoneyType;
		try {
			moneyPayer = await this.getByNameAndCurrencyIdAndGuildId(payer, currency_id, guild_id);
		} catch (error: any) {
			result.message = error.message;
			return result;
		}

		if (moneySeller.guild_member.id === moneyPayer.guild_member.id) {
			result.message = '–ù–µ –º–æ–∂–Ω–∞ –≤–∏—Å—Ç–∞–≤–ª—è—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ —Å–∞–º–æ–º—É —Å–æ–±—ñ';
			return result;
		}

		const count = await this._invoiceRepository.countByAccountIds(
			moneySeller.account.id,
			moneyPayer.account.id
		);

		if (count >= 10) {
			result.message = '–ü–ª–∞—Ç–Ω–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω —Å–ø–ª–∞—Ç–∏—Ç–∏ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤–∞–º–∏ —Ä–∞—Ö—É–Ω–∫–∏';
			return result;
		}

		purpose = purpose.replace(/\s+/g, ' ').trim();
		purpose = purpose.length ? purpose : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ';
		const maxLength = 200;
		purpose = purpose.length > maxLength ? purpose.substring(0, maxLength) : purpose;

		const entity = await this._invoiceRepository.save(
			new InvoiceEntity({
				model: {
					id: -1,
					seller_account_id: moneySeller.account.id,
					payer_account_id: moneyPayer.account.id,
					amount,
					purpose,
					paid: false
				},
				repository: this._invoiceRepository
			})
		);

		const guild = await this._guildRepository.getById(guild_id);

		await this._requestRepository.telegram('sendMessage', {
			chat_id: moneyPayer.guild_member.user_id,
			text:
				'üìã –í–∞–º –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫\n\n' +
				`üèõÔ∏è –ì—ñ–ª—å–¥—ñ—è: ${guild.name}\n` +
				`üé´ –ö–æ–¥: ${entity.id}\n` +
				`üè∑Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü—å: ${moneyPayer.guild_member.name}\n` +
				`üí∞ –°—É–º–∞: ${amount} ${moneyPayer.currency.code}\n` +
				`üíº –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${purpose}`,
			parse_mode: undefined
		});

		result.success = true;
		result.message = `–†–∞—Ö—É–Ω–æ–∫ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ, –∫–æ–¥: ${entity.id}`;
		result.id = entity.id;

		return result;
	}
}
